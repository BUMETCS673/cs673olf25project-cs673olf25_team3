# Framework-generated: 0%
# Human-written: 70%
# AI-generated: 30%
# Some code are auto generated by cursor, but I have checked and modified them to fit the requirements.

from api.serializers.rsvp_serializer import RSVPSerializer
from api.utils.mongo import get_collection
from datetime import datetime
from bson import ObjectId
from rest_framework import status
from rest_framework.decorators import api_view, renderer_classes, permission_classes, parser_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser, MultiPartParser, FormParser
import logging
logger = logging.getLogger(__name__)

rsvp_collection = get_collection('rsvp')


@api_view(['POST'])
@renderer_classes([JSONRenderer])
@permission_classes([IsAuthenticated])
def create_rsvp(request):
    user_id = str(request.user.id)
    data = request.data.copy()
    data['user_id'] = user_id
    data['created_at'] = datetime.now().isoformat()
    serializer = RSVPSerializer(data=data)
    if serializer.is_valid():
        try:
            # Check if user has already RSVP'd to this plan
            existing_rsvp = rsvp_collection.find_one({
                "plan_id": data["plan_id"],
                "user_id": data["user_id"]
            })
            if existing_rsvp:
                return Response({
                    "error": "User has already RSVP'd to this plan"
                }, status=status.HTTP_400_BAD_REQUEST)
            
            result = rsvp_collection.insert_one(data)
            
            # Filter allowed fields for response
            allowed_fields = ["plan_id", "user_id", "created_at"]
            _data = {key: data[key] for key in allowed_fields if key in data}
            
            return Response({
                "message": "RSVP created",
                "id": str(result.inserted_id),
                "data": _data
            }, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.exception("Error inserting RSVP into MongoDB")
            return Response(
                {
                    "error": str(e)
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@renderer_classes([JSONRenderer])
@permission_classes([IsAuthenticated])
def get_rsvp_by_plan_id(request, plan_id):
    try:
        rsvps = list(rsvp_collection.find({"plan_id": str(plan_id)}))
    except Exception:
        return Response({"error": "Invalid ID"}, status=status.HTTP_400_BAD_REQUEST)
    
    if not rsvps:
        return Response({"error": "RSVP not found"},status=status.HTTP_404_NOT_FOUND)
    
    # Convert ObjectIds to strings
    for rsvp in rsvps:
        rsvp["_id"] = str(rsvp["_id"])
    
    return Response({"data": rsvps}, status=status.HTTP_200_OK)


@api_view(['GET'])
@renderer_classes([JSONRenderer])
@permission_classes([IsAuthenticated])
def get_rsvp_by_user_id(request):
    try:
        rsvps = list(rsvp_collection.find({"user_id": str(request.user.id)}))
    except Exception:
        return Response({"error": "Invalid ID"}, status=status.HTTP_400_BAD_REQUEST)
    
    if not rsvps:
        return Response({"error": "RSVP not found"},status=status.HTTP_404_NOT_FOUND)
    
    # Convert ObjectIds to strings
    for rsvp in rsvps:
        rsvp["_id"] = str(rsvp["_id"])
    
    return Response({"data": rsvps}, status=status.HTTP_200_OK)


@api_view(['DELETE'])
@renderer_classes([JSONRenderer])
@permission_classes([IsAuthenticated])
def delete_rsvp_by_id(request, rsvp_id):
    try:
        _id = ObjectId(rsvp_id)
    except Exception:
        return Response({"error": "Invalid ID"}, status=status.HTTP_400_BAD_REQUEST)
    
    result = rsvp_collection.delete_one({"_id": _id})

    if result.deleted_count == 0:
        return Response({"error": "RSVP not found"},status=status.HTTP_404_NOT_FOUND)

    return Response({"message": f"RSVP {_id} deleted successfully"}, status=status.HTTP_200_OK)

@api_view(['DELETE'])
@renderer_classes([JSONRenderer])
@permission_classes([IsAuthenticated])
def delete_rsvp_by_plan_id(request, plan_id):
    try:
        plan_id_obj = ObjectId(plan_id)
    except Exception:
        return Response({"error": "Invalid ID"}, status=status.HTTP_400_BAD_REQUEST)

    result = rsvp_collection.delete_one({"plan_id": plan_id})

    if result.deleted_count == 0:
        return Response({"error": "RSVP not found"},status=status.HTTP_404_NOT_FOUND)

    return Response({"message": f"RSVP for plan {plan_id} deleted successfully"}, status=status.HTTP_200_OK)
# Framework-generated: 0%
# Human-written: 45%
# AI-generated: 55%

name: Digital Ocean Staging CICD

on:
  pull_request:
    branches: [ "development" ]
    types: [closed]
  workflow_dispatch:

jobs:
  # Frontend CI
  frontend-ci:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
  
  # Backend CI
  backend-ci:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    environment: development
    
    defaults:
      run:
        working-directory: backend
    
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.13]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create .env file from environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env
          echo "MONGO_DATABASE_HOST=${{ secrets.MONGO_DATABASE_HOST }}" >> .env
          echo "MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}" >> .env
          echo "MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}" >> .env
          echo "MONGO_DATABASE_PWD=${{ secrets.MONGO_DATABASE_PWD }}" >> .env
          echo "MONGO_DATABASE_PORT=${{ secrets.MONGO_DATABASE_PORT }}" >> .env
          echo "MONGO_DATABASE_TLS=${{ secrets.MONGO_DATABASE_TLS }}" >> .env
          echo "MONGO_DATABASE_SSL=${{ secrets.MONGO_DATABASE_SSL }}" >> .env
      
      - name: Run tests
        working-directory: backend
        run: pytest -v

  # Frontend Build
  frontend-build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    needs: frontend-ci
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DOCR
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_TOKEN }}
          password: ${{ secrets.DOCKER_TOKEN }}
          registry: registry.digitalocean.com

      - name: Build frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/planningjam_dev:latest .
          docker push ${{ secrets.DOCKER_REGISTRY }}/planningjam_dev:latest

  # Backend Build
  backend-build:   
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    needs: backend-ci
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DOCR
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_TOKEN }}
          password: ${{ secrets.DOCKER_TOKEN }}
          registry: registry.digitalocean.com

      - name: Build backend image
        run: |
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/planningjam_api_dev:latest .
          docker push ${{ secrets.DOCKER_REGISTRY }}/planningjam_api_dev:latest
  
  # Deploy to Droplet
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: SSH to droplet and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DROPLET_IP_STAGING }}
          username: ${{ secrets.DROPLET_USER_STAGING }}
          key: ${{ secrets.DROPLET_KEY_STAGING }}
          script: |
            cd ~/app
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_TOKEN }} --password-stdin registry.digitalocean.com
            docker compose pull
            docker compose up -d --force-recreate
            docker logout registry.digitalocean.com


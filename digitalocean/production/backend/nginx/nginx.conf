events {}

http {
    upstream backend {
        server backend:8000;
    }

    # Redirect HTTP to HTTPS for the backend subdomain
    server {
        listen 80;
        server_name ${SERVER_NAME};
        return 301 https://$host$request_uri;
    }

    # Handle HTTPS traffic for the backend API
    server {
        listen 443 ssl;
        server_name ${SERVER_NAME};

        ssl_certificate /etc/nginx/certs/<certname>.crt;        # update certificate file name
        ssl_certificate_key /etc/nginx/certs/<cerkeytname>.key; # update certificate key file name

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '${ALLOWED_ORIGIN}';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Add CORS headers to all other API requests
            add_header 'Access-Control-Allow-Origin' '${ALLOWED_ORIGIN}';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}